COURS 1 INTRO PYTHON
1. Introduction à Python
Python est un langage de programmation facile à apprendre, très utilisé pour divers projets, allant du développement web à l'analyse de données. Ce cours couvre les bases nécessaires pour comprendre et écrire des scripts simples.
2. Affichage de Texte et la Fonction print()
La fonction print() permet d'afficher du texte à l'écran. Par exemple, pour afficher "Bonjour tout le monde !", tu utilises :
print("Bonjour tout le monde !")
Afficher du texte sur plusieurs lignes
Pour afficher du texte sur plusieurs lignes avec un seul appel à print(), utilise l’échappement de caractères \n (nouvelle ligne) :
print("Bonjour tout le monde !\nBienvenue dans le monde de la programmation Python !")
3. Variables et Types de Données
Une variable est un espace de mémoire dans lequel tu stockes des données. Les types de données les plus courants sont :
int : entier (par exemple : 10)
float : nombre à virgule flottante (par exemple : 3.14)
str : chaîne de caractères (par exemple : "Python")
Déclaration de Variables
Voici comment déclarer des variables en Python :
prenom = "Alice"
age = 25
Afficher des Variables
Pour afficher une variable dans une phrase, tu peux utiliser le formatage avec les f-strings :

print(f"Je m'appelle {prenom} et j'ai {age} ans.")
Type de Donnée et Conversion
La fonction type() te permet de vérifier le type d'une variable :
prix = 19.99
print(type(prix))  # Affichera <class 'float'>
Tu peux changer le type d'une variable (conversion) :
prix = int(prix)
print(type(prix))  # Affichera <class 'int'>
4. Interaction Utilisateur avec input()
Python te permet d'interagir avec l'utilisateur grâce à la fonction input(). Par défaut, input() renvoie une chaîne de caractères, mais tu peux convertir l'entrée en un autre type de données :
prenom = input("Quel est ton prénom ? ")
age = int(input("Quel est ton âge ? "))
print(f"Bonjour {prenom}, tu as {age} ans !")
Conversion de Types
Si l'utilisateur entre un nombre à virgule, utilise float() pour convertir l'entrée en nombre flottant :
nombre = float(input("Entre un nombre avec virgule : "))
print(f"Le nombre est {nombre} et son type est {type(nombre)}")
5. Conditions avec if, elif, et else
Les conditions te permettent d'exécuter du code selon des critères spécifiques. Par exemple, si tu veux tester si un nombre est positif, négatif ou nul :
nombre = int(input("Entre un nombre : "))

if nombre > 0:
    print("Le nombre est positif")
elif nombre < 0:
    print("Le nombre est négatif")
else:
    print("Le nombre est nul")
-Comparaison de Nombres et Logique Conditionnelle
-Pour déterminer si quelqu'un est mineur ou majeur :
age = int(input("Quel est ton âge ? "))

if age < 18:
    print("Tu es mineur.")
else:
    print("Tu es majeur.")
6. Opérations Mathématiques
Python permet de faire des calculs simples. Voici les opérateurs principaux :
Addition : +
Soustraction : -
Multiplication : *
Division : /
Division entière : //
Modulo (reste de division) : %
Exemple :
a = int(input("Premier nombre : "))
b = int(input("Deuxième nombre : "))

somme = a + b
produit = a * b
quotient = a / b
reste = a % b

print(f"La somme est {somme}, le produit est {produit}, le quotient est {quotient}, et le reste est {reste}")
Vérification de Parité (Pair/Impair)
Pour savoir si un nombre est pair ou impair :

nombre = int(input("Entre un nombre : "))

if nombre % 2 == 0:
    print("Le nombre est pair")
else:
    print("Le nombre est impair")
Vérification de la Divisibilité
Pour savoir si un nombre est divisible par un autre sans reste :

a = int(input("Premier nombre : "))
b = int(input("Deuxième nombre : "))

if a % b == 0:
    print(f"{a} est divisible par {b}")
else:
    print(f"{a} n'est pas divisible par {b}")
7. Mini-Projets
Projet 1 : Calculatrice
Voici comment construire une calculatrice simple :

a = float(input("Premier nombre : "))
b = float(input("Deuxième nombre : "))

operation = input("Choisis une opération (+, -, *, /) : ")

if operation == "+":
    print(f"Le résultat est {a + b}")
elif operation == "-":
    print(f"Le résultat est {a - b}")
elif operation == "*":
    print(f"Le résultat est {a * b}")
elif operation == "/":
    print(f"Le résultat est {a / b}")
else:
    print("Opération non reconnue")
Projet 2 : Calculateur de Prix de Billets de Cinéma
Ce projet combine plusieurs notions. Voici une structure de base :

age = int(input("Quel est votre âge ? "))
carte_abonnement = input("Avez-vous une carte d'abonnement (oui/non) ? ").lower()
jour = input("Quel jour de la semaine souhaitez-vous aller au cinéma ? ").lower()

# Détermination du tarif en fonction de l'âge
if age < 18:
    prix = 8
elif age >= 65:
    prix = 7
else:
    prix = 12

# Application des réductions
if carte_abonnement == "oui":
    prix *= 0.8  # Réduction de 20%

if jour == "mardi" or jour == "mercredi":
    prix *= 0.7  # Réduction de 30%

print(f"Le prix final à payer est : {prix}€")
Conclusion
Ce cours t'a introduit aux concepts de base nécessaires pour résoudre les exercices et mini-projets Python : les affichages de texte, la déclaration de variables, les entrées utilisateur, les conditions et les opérations mathématiques. Avec ces notions, tu es prêt à explorer davantage et à pratiquer en résolvant les exercices que tu as préparés.
N'hésite pas à me demander plus de détails ou des explications supplémentaires si nécessaire.

TP1

Exercice 1 : Hello World & Print
Écris un programme qui affiche "Bonjour tout le monde !" puis "Bienvenue dans le monde de la programmation Python !" 
Modifie le programme pour qu'il affiche ces deux phrases sur deux lignes différentes avec un seul appel à print.
Exercice 2 : Variables et Types
Déclare une variable qui représente ton prénom et une autre qui représente ton âge.
Affiche ces deux informations dans une phrase.
Exerce-toi à utiliser le formatage f"..." pour inclure ces variables dans la phrase.
Crée une variable qui contient un nombre à virgule et affiche son type.
Change ensuite cette variable pour contenir un entier et vérifie à nouveau son type.
Exercice 3 : Input & Interaction
Demande à l'utilisateur son prénom et son âge.
Affiche ensuite une phrase comme "Bonjour [prénom], tu as [âge] ans !".
Demande un nombre à l'utilisateur et affiche son type.
Si l'utilisateur entre un nombre à virgule, modifie le programme pour le convertir en nombre flottant.
Exercice 4 : Conditions
Demande à l'utilisateur un nombre et indique s'il est positif, négatif ou nul.
Crée un programme qui demande à l'utilisateur sa couleur préférée et donne un commentaire sur cette couleur  similaire à l'exemple dans ton script).
Demande à l'utilisateur de saisir un âge, puis affiche "mineur" si l'âge est inférieur à 18 et "majeur" dans le cas contraire.
Exercice 5 : Opérations mathématiques
Demande deux nombres à l'utilisateur.
Calcule et affiche la somme, la différence, le produit, le quotient et le reste de la division entière.
Crée un programme qui vérifie si un nombre donné par l'utilisateur est pair ou impair.
Demande deux nombres à l'utilisateur et utilise une condition pour vérifier si le premier est divisible par le second sans reste.
Ces exercices permettront à tes élèves de se familiariser avec les concepts que tu leur enseignes tout en pratiquant le code Python de manière interactive.
Mini Projet : Calculatrice
Deux entrées, choisir une opération, un résultat à l’affichage.
Mini Projet : Calculateur de prix de billets de cinéma
Objectif : Créer un programme en Python qui simule l'achat de billets de cinéma en fonction de plusieurs critères : l'âge de l'utilisateur, le jour de la semaine, et si l'utilisateur a une carte d'abonnement. Le programme doit calculer le prix total à payer en fonction des informations fournies.
Fonctionnalités du programme :
Demander l'âge de l'utilisateur : L'âge influence le prix du billet (tarif enfant, tarif senior, tarif adulte).
Demander si l'utilisateur possède une carte d'abonnement : La carte permet de bénéficier d'une réduction sur le prix du billet.
Demander quel jour de la semaine l'utilisateur souhaite aller au cinéma : Il existe des réductions pour certaines journées (par exemple, le mardi et le mercredi).
Calculer le prix final : Le prix du billet est déterminé en fonction de l'âge, de la carte d'abonnement et du jour de la semaine.
Afficher le prix final à payer : Le programme affiche le montant total à payer en fonction des critères sélectionnés.
Règles de calcul des prix :
Tarif adulte (18-64 ans) : 12€
Tarif enfant (moins de 18 ans) : 8€
Tarif senior (65 ans et plus) : 7€
Réduction carte d'abonnement : 20% de réduction sur le prix total.
Réduction jour spécial (mardi et mercredi) : 30% de réduction sur le prix du billet.
Consignes :
Entrée utilisateur :
Demander l'âge de l'utilisateur.
Demander si l'utilisateur possède une carte d'abonnement (répondre par oui ou non).
Demander le jour de la semaine.
Conditions à vérifier :
Vérifier les conditions pour appliquer le tarif (enfant, adulte, senior).
Appliquer les réductions si l'utilisateur a une carte d'abonnement.
Appliquer les réductions si c'est un jour spécial (mardi ou mercredi).
Sorties attendues :
Afficher le prix du billet sans réductions.
Appliquer les réductions et afficher le prix final à payer.



Mini Projet : Système de gestion de commandes de pizza
Objectif : Créer un programme en Python qui permet à un utilisateur de passer commande pour une pizza. Le programme permet à l'utilisateur de choisir la taille de la pizza, des suppléments, et de calculer le prix final en fonction des choix. Le but est d'appliquer les notions de conditions, de variables et d'entrées utilisateur.
Fonctionnalités du programme :
Choix de la taille de la pizza : L'utilisateur peut choisir entre trois tailles de pizza (petite, moyenne, grande), avec des prix différents pour chaque taille.
Ajouter des suppléments : L'utilisateur peut choisir d'ajouter des suppléments (ex : fromage supplémentaire, olives, champignons) moyennant des coûts supplémentaires.
Calculer le prix final : Le programme doit calculer le prix total en fonction de la taille de la pizza et des suppléments choisis.
Afficher la commande finale : Le programme affiche un récapitulatif de la commande avec le prix total à payer.
Règles de calcul des prix :
Prix des pizzas :
Petite pizza : 8€
Moyenne pizza : 12€
Grande pizza : 15€
Prix des suppléments :
Fromage supplémentaire : 1.50€
Olives : 1.00€
Champignons : 1.00€
Consignes :
Entrée utilisateur :
Demander à l'utilisateur de choisir une taille de pizza.
Demander à l'utilisateur s'il souhaite ajouter des suppléments (fromage, olives, champignons).
Calculer le prix en fonction des choix de l'utilisateur.
Conditions à vérifier :
Vérifier la taille choisie par l'utilisateur et appliquer le prix correspondant.
Ajouter les coûts des suppléments si l'utilisateur en souhaite.
Calculer le prix final.
Sorties attendues :
Afficher le prix de la pizza choisie.
Afficher le récapitulatif des suppléments.
Afficher le prix total à payer.

Mini Projet : Calculateur de tarifs pour un parc d'attractions
Objectif : Créer un programme en Python qui permet de calculer le tarif d'entrée pour un parc d'attractions en fonction de l'âge, du jour de la semaine, et de l'éventuelle possession d'une carte de réduction. Le programme doit déterminer le prix du billet et afficher le montant total à payer.
Fonctionnalités du programme :
Demander l'âge de l'utilisateur : L'âge détermine le tarif d'entrée (tarif enfant, adulte, senior).
Demander si l'utilisateur possède une carte de réduction : Une réduction est appliquée si l'utilisateur possède une carte.
Demander le jour de la semaine : Il existe des réductions pour les jours spéciaux (par exemple, le mardi et le mercredi).
Calculer le prix final : Le prix est déterminé par l'âge, la carte de réduction, et le jour de la semaine.
Afficher le prix final à payer : Le programme affiche le montant total à payer après application des réductions.
Règles de calcul des prix :
Tarif adulte (18-64 ans) : 20€
Tarif enfant (moins de 18 ans) : 12€
Tarif senior (65 ans et plus) : 15€
Réduction carte de réduction : 10% de réduction.
Réduction jour spécial (mardi et mercredi) : 15% de réduction.
Consignes :
Entrée utilisateur :
Demander à l'utilisateur son âge.
Demander à l'utilisateur s'il possède une carte de réduction (oui/non).
Demander à l'utilisateur quel jour de la semaine il souhaite visiter le parc.
Conditions à vérifier :
Déterminer le tarif en fonction de l'âge.
Appliquer une réduction si l'utilisateur possède une carte de réduction.
Appliquer une réduction supplémentaire si c'est un jour spécial (mardi ou mercredi).
Sorties attendues :
Afficher le prix de base du billet.
Afficher les réductions appliquées.
Afficher le prix final à payer.

COURS 2 - Fonctions
Cours : Introduction aux Fonctions et Modules en Python
Objectif du cours :
Les élèves apprendront à :
Comprendre ce qu’est une fonction et son utilité.
Créer des fonctions réutilisables en Python.
Utiliser des paramètres et retourner des valeurs depuis une fonction.
Utiliser des fonctions intégrées de Python.
Importer et utiliser des modules natifs tels que math et datetime.
I. Introduction aux Fonctions
1. Qu'est-ce qu'une fonction ?
Une fonction est un bloc de code qui effectue une tâche spécifique. Elle permet de réutiliser le code sans avoir à le réécrire.
Python dispose de fonctions intégrées comme print(), mais vous pouvez aussi définir vos propres fonctions.
2. Définir une fonction
En Python, une fonction est définie avec le mot-clé def, suivi du nom de la fonction et des parenthèses.
def nom_de_la_fonction():
    # Bloc de code
    print("Bonjour tout le monde !")

Cette fonction affiche "Bonjour tout le monde !" quand elle est appelée.
3. Appeler une fonction
Pour appeler une fonction, il suffit d'utiliser son nom suivi de parenthèses :
nom_de_la_fonction()
4. Paramètres et Arguments
Les fonctions peuvent prendre des paramètres pour rendre le code plus flexible.
Exemple d'une fonction qui prend des paramètres :
def salutation(prenom):
    print(f"Bonjour {prenom} !")
Ici, prenom est un paramètre. Quand on appelle la fonction, on peut donner un argument :
salutation("Alice")
5. Retourner une valeur
Une fonction peut retourner une valeur avec le mot-clé return.
def addition(a, b):
    return a + b
Exemple :
resultat = addition(3, 5)
print(resultat)  # Affiche 8
II. Les Modules en Python
1. Qu'est-ce qu'un module ?
Un module est un fichier Python contenant des fonctions, des classes ou des variables que vous pouvez réutiliser dans un autre programme.
Pour utiliser un module, il faut l'importer avec le mot-clé import.
2. Exemple : Utilisation du module math
Le module math contient plusieurs fonctions mathématiques utiles.
import math
print(math.sqrt(16))  # Affiche 4.0
Ici, sqrt() est une fonction du module math qui calcule la racine carrée.
3. Exemple : Utilisation du module datetime
Le module datetime permet de travailler avec des dates et heures.
import datetime

aujourdhui = datetime.date.today()
print(f"Aujourd'hui, nous sommes le {aujourdhui}")

Travaux Pratiques (2 heures)
Objectif :
Les élèves vont créer des fonctions simples et utiliser des modules comme math et datetime dans leurs scripts.
Étape 1 : Création de Fonctions
Exercice 1 : Fonction de salutation
Créez une fonction salutation(prenom) qui prend en paramètre un prénom et affiche un message de bienvenue.
Ensuite, appelez cette fonction avec plusieurs prénoms différents.
Exercice 2 : Fonction de calcul
Créez une fonction addition(a, b) qui prend deux nombres en paramètre et retourne leur somme.
Appelez cette fonction et affichez le résultat.
Exercice 3 : Calcul de l'âge
Créez une fonction calculer_age(annee_naissance) qui prend l'année de naissance en paramètre et retourne l'âge actuel.
Utilisez le module datetime pour obtenir l'année en cours.
Appelez cette fonction et affichez l'âge.
Étape 2 : Utilisation des Modules
Exercice 4 : Racine carrée
Importez le module math et créez un programme qui demande un nombre à l’utilisateur, puis affiche sa racine carrée en utilisant math.sqrt().
Exercice 5 : Afficher la date actuelle
Utilisez le module datetime pour afficher la date actuelle dans un format lisible.
Étape 3 : Projet final
Exercice 6 : Calcul de surface
Créez une fonction calculer_surface_cercle(rayon) qui calcule et retourne la surface d’un cercle en utilisant la formule : Surface=π×r2\text{Surface} = \pi \times r^2Surface=π×r2.
Utilisez math.pi pour obtenir la valeur de π\piπ.
Demandez à l’utilisateur de saisir le rayon, puis affichez la surface du cercle.


RENDU : NOM ET PRENOM / TP2

Mini-Projet : Jeu de Devinez le Nombre
Objectif : Créer un petit jeu où l'ordinateur choisit un nombre aléatoire, et l'utilisateur doit deviner ce nombre en un nombre limité de tentatives.
Fonctionnalités du projet :
Générer un nombre aléatoire entre 1 et 100.
Interaction utilisateur : L'utilisateur entre ses tentatives pour deviner le nombre.
Boucle et conditions:
Si l'utilisateur devine un nombre trop grand, afficher "Trop grand".
Si l'utilisateur devine un nombre trop petit, afficher "Trop petit".
Si l'utilisateur trouve le bon nombre, afficher "Bravo, vous avez deviné le nombre en X tentatives !"
Limitation des tentatives : L'utilisateur a un nombre limité de tentatives (par exemple, 10).
Fonctions:
Créer une fonction pour le jeu principal.
Créer une fonction pour demander à l'utilisateur s'il souhaite rejouer.